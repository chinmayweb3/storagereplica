// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime    @default(now())
  files         File[]
  folders       Folder[]
  hasAccess     HasAccess[]
}

model HasAccess {
  id       String @id @default(cuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId String
  folder   Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
}

model Folder {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  HasAccess HasAccess[]
}

model File {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model MasterDrive {
//   id        String   @id @default(cuid())
//   userId    String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   user      User     @relation(fields: [userId], references: [id])
//   files     File[]
//   folders   Folder[]
// }

// model File {
//   id           String   @id @default(cuid())
//   name         String
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   type         String   @default("file")
//   parentFolder String?

//   masterDriveId String
//   masterDrive   MasterDrive @relation(fields: [masterDriveId], references: [id], onDelete: Cascade)
// }

// model Folder {
//   id           String   @id @default(cuid())
//   name         String
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   type         String   @default("folder")
//   parentFolder String?

//   masterDriveId String
//   masterDrive   MasterDrive @relation(fields: [masterDriveId], references: [id], onDelete: Cascade)
// }
